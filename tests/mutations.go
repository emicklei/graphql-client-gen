package tests

// generated by github.com/emicklei/graphql-client-gen/cmd/gcg version: v1.0.1+dirty
// DO NOT EDIT

import (
	"time"
)

var (
	_ = time.Now
)

// CreateResultMutation calls createResult(input:ResultInput!):ID!
// create a Result
type CreateResultMutation struct {
	Errors []Error `json:"errors"`
	Data   struct {
		ID `graphql:"createResult(input: $input)" json:"createResult"`
	} `graphql:"mutation"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_m CreateResultMutation) Build(
	_input ResultInput,
) GraphQLRequest {
	_typedVars := map[string]valueAndType{
		"input": {value: _input, graphType: "ResultInput!"},
	}
	return buildRequest("mutation", "createResult", _m.Data, _typedVars)
}

// NoArgOpMutation calls noArgOp():Int!
type NoArgOpMutation struct {
	Errors []Error `json:"errors"`
	Data   struct {
		Int `graphql:"noArgOp()" json:"noArgOp"`
	} `graphql:"mutation"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_m NoArgOpMutation) Build() GraphQLRequest {
	_typedVars := map[string]valueAndType{}
	return buildRequest("mutation", "noArgOp", _m.Data, _typedVars)
}

// OneArgOpMutation calls oneArgOp(required:Boolean!):String
type OneArgOpMutation struct {
	Errors []Error `json:"errors"`
	Data   struct {
		String `graphql:"oneArgOp(required: $required)" json:"oneArgOp"`
	} `graphql:"mutation"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_m OneArgOpMutation) Build(
	_required bool,
) GraphQLRequest {
	_typedVars := map[string]valueAndType{
		"required": {value: _required, graphType: "Boolean!"},
	}
	return buildRequest("mutation", "oneArgOp", _m.Data, _typedVars)
}

// FilterOpMutation calls filterOp(sort:String!):[Result]
type FilterOpMutation struct {
	Errors []Error `json:"errors"`
	Data   []struct {
		Result `graphql:"filterOp(sort: $sort)" json:"filterOp"`
	} `graphql:"mutation"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_m FilterOpMutation) Build(
	_sort string,
) GraphQLRequest {
	_typedVars := map[string]valueAndType{
		"sort": {value: _sort, graphType: "String!"},
	}
	return buildRequest("mutation", "filterOp", _m.Data, _typedVars)
}

// ListOpMutation calls ListOp(limit:Int,prefix:String!):[Result]
type ListOpMutation struct {
	Errors []Error `json:"errors"`
	Data   []struct {
		Result `graphql:"ListOp(limit: $limit,prefix: $prefix)" json:"ListOp"`
	} `graphql:"mutation"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_m ListOpMutation) Build(
	_limit int32,
	_prefix string,
) GraphQLRequest {
	_typedVars := map[string]valueAndType{
		"limit":  {value: _limit, graphType: "Int"},
		"prefix": {value: _prefix, graphType: "String!"},
	}
	return buildRequest("mutation", "ListOp", _m.Data, _typedVars)
}

// PlusOpMutation calls plusOp(a:Int!,b:Int!):Int
type PlusOpMutation struct {
	Errors []Error `json:"errors"`
	Data   struct {
		Int `graphql:"plusOp(a: $a,b: $b)" json:"plusOp"`
	} `graphql:"mutation"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_m PlusOpMutation) Build(
	_a int32,
	_b int32,
) GraphQLRequest {
	_typedVars := map[string]valueAndType{
		"a": {value: _a, graphType: "Int!"},
		"b": {value: _b, graphType: "Int!"},
	}
	return buildRequest("mutation", "plusOp", _m.Data, _typedVars)
}

// PlusArrayOpMutation calls plusArrayOp(as:[Int]!,bs:[Int!]):[Int]
type PlusArrayOpMutation struct {
	Errors []Error `json:"errors"`
	Data   []struct {
		Int `graphql:"plusArrayOp(as: $as,bs: $bs)" json:"plusArrayOp"`
	} `graphql:"mutation"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_m PlusArrayOpMutation) Build(
	_as []int32,
	_bs []int32,
) GraphQLRequest {
	_typedVars := map[string]valueAndType{
		"as": {value: _as, graphType: "[Int]!"},
		"bs": {value: _bs, graphType: "[Int!]"},
	}
	return buildRequest("mutation", "plusArrayOp", _m.Data, _typedVars)
}
