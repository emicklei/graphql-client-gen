package tweet

// generated by github.com/emicklei/graphql-client-gen/cmd/gcg on Thu, 27 Jan 2022 16:40:29 CET
// DO NOT EDIT

import (
	"time"
)

var (
	_ = time.Now
)

// Tweet is a OBJECT.
// This is a
// multine comment
type Tweet struct {
	ID         interface{}              `graphql:"id" json:"id,omitempty"`
	Body       *string                  `graphql:"body" json:"body,omitempty"`
	Date       *CustomDate              `graphql:"date" json:"date,omitempty"`
	Author     *User                    `graphql:"Author" json:"Author,omitempty"`
	Stats      *Stat                    `graphql:"Stats" json:"Stats,omitempty"`
	Responders *TweetRespondersFunction `graphql:"Responders" json:"Responders,omitempty"`
}

// User is a OBJECT.
type User struct {
	ID        interface{} `graphql:"id" json:"id,omitempty"`
	Username  *string     `graphql:"username" json:"username,omitempty"`
	FirstName *string     `graphql:"first_name" json:"first_name,omitempty"`
	LastName  *string     `graphql:"last_name" json:"last_name,omitempty"`
	FullName  *string     `graphql:"full_name" json:"full_name,omitempty"`
	Name      *string     `graphql:"name" json:"name,omitempty"`
	AvatarUrl *Url        `graphql:"avatar_url" json:"avatar_url,omitempty"`
}

// Stat is a OBJECT.
type Stat struct {
	Views     *int32 `graphql:"views" json:"views,omitempty"`
	Likes     *int32 `graphql:"likes" json:"likes,omitempty"`
	Retweets  *int32 `graphql:"retweets" json:"retweets,omitempty"`
	Responses *int32 `graphql:"responses" json:"responses,omitempty"`
}

// Notification is a OBJECT.
type Notification struct {
	//  comment 1
	ID *interface{} `graphql:"id" json:"id,omitempty"`
	// comment 2
	Date *CustomDate `graphql:"date" json:"date,omitempty"`
	Type *string     `graphql:"type" json:"type,omitempty"`
}

// Meta is a OBJECT.
type Meta struct {
	//
	// This is a
	// multine comment
	Count *int32 `graphql:"count" json:"count,omitempty"`
}

// ValueFilter is a OBJECT.
type ValueFilter struct {
	Value string `graphql:"value" json:"value,omitempty"`
}

// ValuesFilter is a OBJECT.
type ValuesFilter struct {
	Values []string `graphql:"values" json:"values,omitempty"`
}

// RangeFilter is a OBJECT.
type RangeFilter struct {
	//
	// Filter the values from and including this value.
	// If this field is not set then the filter is applied without a minimum value.
	From *float64 `graphql:"from" json:"from,omitempty"`
	//
	// Filter the values up to and including this value.
	// If this field is not set then the filter is applied without a maximum value.
	To *float64 `graphql:"to" json:"to,omitempty"`
}
